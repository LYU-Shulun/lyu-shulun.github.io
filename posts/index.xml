<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Aurora and Boy</title>
    <link>/posts/</link>
    <description>Recent content in Posts on Aurora and Boy</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 07 Sep 2020 14:46:35 +0800</lastBuildDate>
    
	<atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>天才、勤劳和方法</title>
      <link>/posts/%E5%A4%A9%E6%89%8D%E5%8B%A4%E5%8A%B3%E5%92%8C%E6%96%B9%E6%B3%95/</link>
      <pubDate>Mon, 07 Sep 2020 14:46:35 +0800</pubDate>
      
      <guid>/posts/%E5%A4%A9%E6%89%8D%E5%8B%A4%E5%8A%B3%E5%92%8C%E6%96%B9%E6%B3%95/</guid>
      <description>缓慢的学习进度，让自己一度自我怀疑个人能力；甚至，自己一度想要放弃。在决定转向前端工程师之前，就已经给自己做心理建设：我不是一个聪明的家伙，更不是一个天才。我必须用勤奋来弥补自己与同龄人的差距。
但是，在实际的业余学习时间，明显感觉到缺乏系统的学习方法给自己带来的困顿。最直接的体现就是学习进度非常的缓慢。
一方面，我告诉自己不要害怕暴露缺点和承认自己的不足；另一方面，我也花了很多时间，去分析自己的学习方法。我发现，导致自己进度缓慢的原因如下：
 目标不具体 -&amp;gt; 每天宝贵的业余时间，不能充分利用。完全靠感性安排学习计划。 没有为自己制定 roadmap -&amp;gt; 很难给自己设定 deadline。 研究基础内容和实践时间冲突：操作系统运行原理、像素如何显示这些 big picture 占据了自己宝贵的实践时间。  自己看了 Perter 的 Teach yourself programming in Ten years 大受启发，并 决定：
 从零到一开始做起。按部就班地积累，切不可急躁盲进，更不可什么事情不求甚解。 Learn by doing. Optimize by doing. 阅读别人代码，参加别人的 open source project。 坚持分享日志与笔记，参加社区活动。  鸡汤的对立面是自律。一味的追随兴趣，往往都是浅尝辄止，唯有自律才能够真正做出有价值的产品服务，回馈社会。</description>
    </item>
    
  </channel>
</rss>